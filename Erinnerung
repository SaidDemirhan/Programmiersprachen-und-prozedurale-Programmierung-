
„Programmieren“ :
meint das Planen sowie (graphische, und/oder sprachliche) Beschreiben aller Arbeitsschritte, 
die zur Lösung eines gegebenen Problems abzuarbeiten sind.
"Programlama", belirli bir sorunu çözmek için tamamlanması gereken tüm çalışma adımlarını 
(grafik ve / veya dilsel olarak) planlamak ve açıklamak anlamına gelir.

„Codieren“: hingegen meint das Übersetzen dieses graphischen Plans 
in eine für den Computer (oder Compiler / Interpreter) verständliche Sprache.
“Kodlama” ise bu grafik planı bilgisayarın (veya derleyicinin/tercümanın) anlayabileceği bir dile
tercüme etmek demektir.

EDV: Elektronische Daten-Verarbeitung -elektronik veri işleme

VARIABLE

  Integer: Variable, die (nur!) eine einzige ganze Zahl abspeichern kann
  Tamsayı: Tek bir tamsayı (yalnızca!) depolayabilen değişken
  
  Float (oder Double): Variable, die (nur!) eine einzige Kommazahl abspeichern kann
  Tek bir ondalık sayıyı (yalnızca!) depolayabilen değişken
    Virgül yerine NOKTA(.) kullanilmalidir. -mit einem Punkt (statt Komma) 
    Bei Rechnungen mit Kommazahlen müssen Rundungsfehler berücksichtigt werden!
    Ondalık basamaklı hesaplamalarda yuvarlama hataları dikkate alınmalıdır!


  Character: Variable, die (nur!) ein einziges Zeichen abspeichern kann
  (Beispiele sind: Buchstaben, Ziffern, Satzzeichen …)
  Tek bir karakter (sadece!) depolayabilen değişken (Örnekler: harfler, sayılar, noktalama işaretleri...)
  (Character)-Wert ‘q‘ zugewiesen wurde

EVA-Prinzip: Eingabe -> Verarbeitung -> Ausgabe
EVA prensibi: girdi -> işleme -> çıktı

Gösterim 4 cesit olabilir.
  1-PAP
  2-Strukturogramm(Nassi-Schneiderman-Diagramme)
  3-Pseudecode
  4-Quelcodes
  
PAP: Programmablaufplan -Program akis semasi

  Start
  a=5
  b=7
  c=a+b
  Ausgabe=c (paralelkenar)
  Ende 
  
Eingabe: Welche Variable gefüllt werden soll -Girdi: Hangi değişken doldurulmalı  -(paralelkenar)
Ausgabe: Von welcher Variable der Wert ausgegeben wird -Çıktı: Değerin hangi değişkenden çıktığı

Strukturogramm
  a=5
  b=7
  c=a+b
  Ausgabe=c

Pseudecode
  Programm "name des programms"{
    a=5
    b=7
    c=a+b
    Ausgabe=c
  }

ihtiyac duyulacak programlar:
  DIA : grafik araci
  Structorizer: yapi diyagramlari olusturmak icin cizim araci
  Notepad : Pseude code olusturmak icin kullanilacak metin düzenleyici
  
-------------------------------------------------------------------------

Präprozessoranweisung: include<…> 
Önişlemci yönergesi: include<…>
  
„geschlossen“(Strom fließt) -"kapalı" (akım kapali)-  0
„offen“(Strom fließt nicht) -"açık" (akım acik) -     1 

ANSI C:
  C dilinin standart kütüphanesidir.
  
SQL ist die Datenbanksprache - bir veritabanı dili SQL

C# ist eine OOP-Sprache.

IDE: Integrated Development Environment - Entegre Geliştirme Ortamı
  IDE olarak CODE BLOCKS kullanilabilir.

main(){} Program her zaman ana program ile baslamalidir. 

Jede Anweisung wird mit einem Semikolon abgeschlossen.
Her ifade noktalı virgülle sonlandırılır.

// nur eine einzige Zeile Kommentar
/* 
Mehrzeilige 
Kommentar
*/

#include  - Gerekli kütüphaneler include ile birlikte gelir 
#define
her zaman #(hash) sembolü ile baslamalidir.

scanf("%d", &yas) :
  Kullanicidan bilgi almak icin kullanilir.
  yas degiskeninin olusturulmasi öncesinde sarttir.

printf("%d", yas) : 
  Ausgabe -cikti - metinleri konsola cikarmak icin kullanilir.
  cikan metin sonuclari - auch als „Zeichenkette“ oder „String“ bezeichnet.
  icine yazilanlar her zaman " isareti icinde yazilmalidir.
  
stdio.h (STanDart input Output)  :
  printf ve scanf komutlarinin derleyici tarafindan algilanabilmesi icin yazilmasi sarttir.

fflush(stdin):
  ikinci yazilacak scanf öncesi mutlaka klavye arabellegi temizlemek icin kullanilir.
  ANSI C standartlarina uygun olmasa da isimizi halleder, ama her isletim sisteminde kullanilmayabilir.
  
\n : bir sonraki satira gecirir

\t : bir tab tusu kadar bosluk olusturur.

%d : ondalik sayilar icin kullanilir. (Dezimal)

----------------------------------------------------------------------------------------

Verzweigung: (ESKENARDÖRTGEN)
  Das Sprachkonstrukt einer Programmiersprache, das (mittels der Überprüfung einer Bedingung) entscheiden kann, 
  welcher Programmabschnitt  abgearbeitet werden soll, wird Verzweigung genannt.
  Hangi program bölümünün işleneceğine (bir koşulu kontrol ederek) karar verebilen bir programlama dilinin dil yapısına dal denir.
  
  if(sart){
  }else if(sart){
  else{}

Vergleichsoperatoren - karşılaştırma operatörleri
  „gleich“	          =	    ==
  „ungleich“	        ≠	    !=
  „größer“	          >	    >
  „kleiner“	          <	    <
  „größer gleich“	    ≥	    >=
  „kleiner gleich“	  ≤	    <=
  
-------------------------------------------------------------------------------------------

Schleifen

  WHILE-Schleife
  
    while(kosul){
    aksiyon(printf)
    }
    
    kosul= bedingung
    while(kosul)= schleifenkopf
    aksiyon=scleifenrumpf(döngü gövdesi)    
    tamami =schleife

############################################################################

  Do-While Schleife

    Do-While-Schleifen überprüfen die Bedingung erst NACH einem Durchlauf
    Do-while döngüleri yalnızca bir yinelemeden SONRA koşulu kontrol eder
    
      int x;
      do{
        printf(“Geben Sie bitte eine ganze Zahl kleiner 10 ein: “);
        scanf(“%d“,&x);
      }
      while(x>=10);
      printf(“Glückwunsch!“);

 ##############################################################################
 
 FOR-Schleife
 
    main() {
      int start,ziel,sprung,zaehler;
      printf(“Geben Sie bitte den Startwert ein: “);
      scanf(“%d“,&start);
      
      printf(“Geben Sie bitte den Zielwert ein: “);
      fflush(stdin);
      scanf(“%d“,&ziel);
      
      printf(“Geben Sie bitte den Sprungwert ein: “);
      fflush(stdin);
      scanf(“%d“,&sprung);
      for(zaehler=start; zaehler<=ziel; zaehler=zaehler+sprung){
        printf(“Aktueller Zähler-Wert: %d\n“,zaehler);
      }
      printf(“Die Schleife endete, denn der Zähler hat den Wert %d“,zaehler);
    }
###############################################################################
 
Kopfgesteuerte Schleife: WHILE FOR
Fußgesteuerte Schleife: DO-WHILE

Zähler: Sayac

Eger bir döngüde sayac kullanilacaksa kafa kontrollü döngüler tercih edilmelidir. Özellikle for döngüsü

-----------------------------------------------------------------------

MODULO OPERATOR
  
  Der Modulo-Operator ermittelt den Rest beim ganzzahligen Teilen.
  Modulo operatörü, tamsayılara bölerken kalanı belirler.
  
  # include<stdio.h>
  main(){
    int a,b;
    printf(“Geben Sie bitte eine beliebige ganze Zahl ein: “);
    fflush(stdin);
    scanf(“%d“,&a);
    printf(“Geben Sie bitte eine ganze Zahl ungleich 0 ein: “);
    fflush(stdin);
    scanf(“%d“,&b);
    printf(“%d geteilt durch %d ergibt: %d Rest %d“,a,b,a/b,a%b);
  }

-----------------------------------------------------------------------

Zufallszahlen - Rastgele Sayılar

  # include<stdio.h>
  # include<stdlib.h>
  main(){
    int x;
    x= rand();
    printf(“Die Variable x hat aktuell den Wert: %d“,x);
  }
-----
Initialisierung des Zufallsgenerators
Rastgele sayı üretecinin başlatılması
  # include<stdio.h>
  # include<stdlib.h>
  # include<time.h>
  main(){
    int x;
    srand(time(NULL));
    x= rand();
    printf(“Die Variable x hat aktuell den Wert: %d“,x);
  }
-----
random fonksiyonu kullaniminda ayni sayilari sirasiyla verebilir ve 
bunu önlemek icin ilk sayiyi ignore edebiliriz.

  # include<stdio.h>
  # include<stdlib.h>
  # include<time.h>
  main(){
    int x;
    srand(time(NULL));
    rand();
    x= rand();
    printf(“Die Variable x hat aktuell den Wert: %d“,x);
  }
-----

RAND_MAX degeri

    # include<stdio.h>
    # include<stdlib.h>
    main(){
      printf(“Der Maximalwert der Zufallsliste lautet: %d“,RAND_MAX);     //32767
    }
    
-----
Eger Randomda kisitlama yapmak isteresek:

  Würfeln: ……. Zahl zwischen (beiderseits einschließlich) 1 und 6       : rand()%6+1
  Lotto: …….. Zahl zwischen (beiderseits einschließlich) 1 und 49      : rand()%49+1
  Allgemein: ….. Zahl zwischen (beiderseits einschließlich) a und b     : rand()%(b-a+1)+a

-------------------------------------------------------------------

Arrays

kullanicidan 10 sayi isteyip bunlari bir array a kaydedip sonra yazdiralim.

# include<stdio.h>
main(){
  int i;
  int userZahl[10]; 		
  for(i=0;i<10;i++){
    printf(„Geben Sie bitte eine ganze Zahl ein:“);
    fflush(stdin);
    scanf(„%d“,&userZahl[i]);
  }
  for(i=0;i<10;i++){
    printf(„Wert des Feldes mit Index %d: %d\n“,i,userZahl[i]);
  }
}

################################################################

https://trainyourprogrammer.de

################################################################






